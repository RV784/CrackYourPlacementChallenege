class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int s = 0;
        int e = nums.length - 1;
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = s ; i <= e ; i++){
            if(i != s && nums[i] == nums[i-1]){
                continue;
            }
            
            List<List<Integer>> smolAns = threeSum(nums, target - nums[i], i+1, e);
            createResult(ans, smolAns, nums[i]);
        }
        
        return ans;
    }
    
    public List<List<Integer>> twoSum(int[] nums, int target, int s, int e){
        List<List<Integer>> res = new ArrayList<>();
        while(s < e){
            int t = nums[s] + nums[e];
            if(t == target){
                res.add(Arrays.asList(nums[s], nums[e]));
                s++;
                e--;
                while(s < e && nums[s] == nums[s-1]) s++;
                while(s < e && nums[e] == nums[e+1]) e--;
            }else if(t < target){
                s++;
            }else{
                e--;
            }
        }
        return res;
    }
    
    public List<List<Integer>> threeSum(int[] nums, int target, int s, int e){
        List<List<Integer>> res = new ArrayList<>();
        
        for(int i = s ; i <= e ; i++){
            if(i != s && nums[i] == nums[i-1]){
                continue;
            }
            
            List<List<Integer>> smolAns = twoSum(nums, target - nums[i], i+1, e);
            createResult(res, smolAns, nums[i]);
        }
        return res;
    }
    
    public void createResult(List<List<Integer>> res, List<List<Integer>> smolAns, int val){
        for(List<Integer> sa : smolAns){
            sa.add(val);
            res.add(sa);
        }
    }
}